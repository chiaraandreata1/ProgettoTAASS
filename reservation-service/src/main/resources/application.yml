spring:
  application:
    name: reservation-service

# si connette a DB in docker, istruzioni in:
# https://info.crunchydata.com/blog/easy-postgresql-10-and-pgadmin-4-setup-with-docker
  #NO DOCKER : jdbc:postgresql://localhost:5432/reservations
  #CON DOCKER: jdbc:postgresql://dbreservations:5432/reservations
  datasource:
    url: jdbc:postgresql://localhost:5432/reservations
    driver-class-name: org.postgresql.Driver
    username: taass
    password: asd

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Disable feature detection by this undocumented parameter. Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
  jpa:
    properties:
      hibernate:
        temp.use_jdbc_metadata_defaults: false

# Because detection is disabled you have to set correct dialect by hand.
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect

# Hibernate ddl auto (create, create-drop, validate, update)
    hibernate:
      ddl-auto: update

server:
  port: 8083

rabbit:
  reservation:
    exchange-name: rpc.reservation
    reserve:
      queue-name: rpc.reservation.reserve
      key: reservation.reserve
    delete:
      queue-name: rpc.reservation.delete
      key: reservation.delete

  facility:
    exchange-name: rpc.facility
    hours:
      key: facility.hours
    sports:
      key: facility.sports

session:
  datasource:
    #NO DOCKER : jdbc:postgresql://localhost:5432/session
    #CON DOCKER: jdbc:postgresql://dbsession:5432/session
    url: jdbc:postgresql://localhost:5432/session
    driver-class-name: org.postgresql.Driver
    username: taass
    password: asd

    jpa:
      properties:
        hibernate:
          temp.use_jdbc_metadata_defaults: false

      # Because detection is disabled you have to set correct dialect by hand.
      database-platform: org.hibernate.dialect.PostgreSQL9Dialect

      # Hibernate ddl auto (create, create-drop, validate, update)
      hibernate:
        ddl-auto: update
---
spring:
  profiles: "prod"

  datasource:
    url: jdbc:postgresql://dbreservations:5432/reservations

  rabbitmq:
    host: rabbitmq
    port: 5672
    username: default_user_ZDs90OlN6xwqFDLviH7
    password: oFRsk_sA9KKcUFgL6tDwJ8HOU2qdu7GC

eureka:
  instance:
    # Leave prefer ip address to allow the gateway inside the kubernetes cluster to find this service by it's pod ip
    preferIpAddress: true
    # The hostname of the service, to register the pod and turn it easier for the gateway to find it
    hostname: reservation-service
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka-0.eureka.default.svc.cluster.local:8761/eureka,http://eureka-1.eureka.default.svc.cluster.local:8761/eureka,http://eureka-2.eureka.default.svc.cluster.local:8761/eureka

session:
  datasource:
    #NO DOCKER : jdbc:postgresql://localhost:5432/session
    #CON DOCKER: jdbc:postgresql://dbsession:5432/session
    url: jdbc:postgresql://dbsession:5432/session
